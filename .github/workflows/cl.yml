name: CI (Vue)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    # Node 버전/패키지 매니저 바꾸고 싶으면 여기만 수정
    strategy:
      matrix:
        node-version: [20.x]
        package-manager: [npm] # npm | yarn | pnpm

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ matrix.package-manager }} # node_modules 캐시

      # 패키지 매니저 별 설치 커맨드
      - name: Install deps
        run: |
          if [ "${{ matrix.package-manager }}" = "yarn" ]; then yarn install --frozen-lockfile; fi
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then corepack enable; pnpm install --frozen-lockfile; fi
          if [ "${{ matrix.package-manager }}" = "npm" ]; then npm ci; fi

      # 선택: 유닛 테스트가 있으면
      - name: Test
        run: |
          if [ "${{ matrix.package-manager }}" = "yarn" ]; then yarn test --if-present; fi
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then pnpm test --if-present; fi
          if [ "${{ matrix.package-manager }}" = "npm" ]; then npm run test --if-present; fi

      # 빌드 (Vite, Vue CLI 모두 'build' 스크립트 기준)
      - name: Build
        env:
          # 필요 시 환경변수(.env.production 등) 덮어쓰기
          # VITE_API_BASE_URL: https://api.example.com
          # NODE_OPTIONS: --max_old_space_size=4096
          CI: true
        run: |
          if [ "${{ matrix.package-manager }}" = "yarn" ]; then yarn build; fi
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then pnpm build; fi
          if [ "${{ matrix.package-manager }}" = "npm" ]; then npm run build; fi

      # 빌드 결과물을 아티팩트로 보관 (다운로드 가능)
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist
            build
          if-no-files-found: ignore
